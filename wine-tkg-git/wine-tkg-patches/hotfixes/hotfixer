#!/bin/bash

if cd "${srcdir}"/"${_stgsrcdir}" && git merge-base --is-ancestor fbe1ba5578fb7380e2b09a5aebf5aa488744a823 HEAD && ! git merge-base --is-ancestor 5246a035e9d8f978a7b49bb9a607dc1edbc0c53d HEAD && cd "${srcdir}"/"${_winesrcdir}"; then
  msg2 "Ignoring staging upstream commit on this SHA (hotfix)"
  _staging_upstreamignore="true"
fi

if cd "${srcdir}"/"${_winesrcdir}" && git merge-base --is-ancestor fd7992972b252ed262d33ef604e9e1235d2108c5 HEAD; then
  hotfixer() {
      if git merge-base --is-ancestor b7b1ad09629a6678383a5ae791a9507c9eb87be3 HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-6."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor d2b70aa57a77103107a2e620999181c518d14bda HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-5."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor 68e675d73db4fb90fff84c0e1f6de3b492061b5f HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-4."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor 6f4272ce3e74f2d30f45bf0d407cdc9264b813a9 HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-3."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor 0a72ec1dacb59c72980c3133fddf316377349048 HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-2."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor fd7992972b252ed262d33ef604e9e1235d2108c5 HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5."${_userpatch_ext}revert")
      fi
      if git merge-base --is-ancestor acd209d6039f2492bdc8aca3d15bb1b268b04f1a HEAD >/dev/null 2>&1; then
        _patches+=("$_where"/wine-tkg-patches/hotfixes/acd209d6039f2492bdc8aca3d15bb1b268b04f1a."${_userpatch_ext}revert")
      fi
      if [ ${#_patches[@]} -ge 2 ] || [ -e "${_patches}" ]; then
        if [ "$_user_patches_no_confirm" != "true" ]; then
          msg2 "Found ${#_patches[@]} reverting hotfix:"
          printf '%s\n' "${_patches[@]}"
          msg2 "An upstream patchset (starting with fd79929) breaks a large amount of games in various ways (ex: WoW, Overwatch, Star Citizen, Path of Exile etc.)."
          msg2 "As a temporary fix, this patch reverts it on current HEAD."
          msg2 " !! On the most recent trees, some of the games this used to fix are now broken again by another bad interaction"
          msg2 "introduced since (seems to be limited to blizzard stuff so far) !!"
          msg2 ""
          msg2 "An upstream patch (acd209d) breaks setting WINEDBUG and leads to segfaults. As a temporary fix, this patch reverts it on current HEAD."
          read -rp "Do you want to install it/them?"$'\n> N/y : ' _CONDITION;
        fi
        if [ "$_CONDITION" = "y" ] || [ "$_user_patches_no_confirm" = "true" ]; then
          for _f in "${_patches[@]}"; do
            if [ -e "${_f}" ]; then
              msg2 "######################################################"
              msg2 ""
              msg2 "Applying reverting hotfix ${_f}"
              msg2 ""
              msg2 "######################################################"
              patch -Np1 -R < "${_f}"
              echo "Applied reverting hotfix ${_f}" >> "$_where"/last_build_config.log
            fi
          done
        fi
      fi

      _patches=("$_where"/wine-tkg-patches/hotfixes/*."${_userpatch_ext}patch")
      if [ ${#_patches[@]} -ge 2 ] || [ -e "${_patches}" ]; then
        if [ "$_user_patches_no_confirm" != "true" ]; then
          msg2 "Found ${#_patches[@]} hotfix:"
          printf '%s\n' "${_patches[@]}"
          read -rp "Do you want to install it/them?"$'\n> N/y : ' _CONDITION;
        fi
        if [ "$_CONDITION" = "y" ] || [ "$_user_patches_no_confirm" = "true" ]; then
          for _f in "${_patches[@]}"; do
            if [ -e "${_f}" ]; then
              msg2 "######################################################"
              msg2 ""
              msg2 "Applying hotfix ${_f}"
              msg2 ""
              msg2 "######################################################"
              patch -Np1 < "${_f}"
              echo "Applied hotfix ${_f}" >> "$_where"/last_build_config.log
            fi
          done
        fi
      fi
    }
else
  hotfixer() {
    msg2 "No hotfix for you"
  }
fi

#!/bin/bash

# community patches
if [[ ${_community_patches[*]} =~ "gofman_dac.mypatch" ]]; then
  if (cd "${srcdir}"/"${_stgsrcdir}" && git merge-base --is-ancestor 2c7588eb2f99f2941690b20148ef743477b1f58b HEAD && ! git merge-base --is-ancestor 8be56c21f9f3ddb774dca805a365e33322021f8b HEAD); then
    _staging_args+=(-W ntoskrnl.exe-KdRefreshDebuggerNotPresent)
  fi
  if (cd "${srcdir}"/"${_stgsrcdir}" && git merge-base --is-ancestor 2263ec0d3db07c064541ab0b66108a3f81ae9b1a HEAD && ! git merge-base --is-ancestor f3298432f0c4614a7554e06c6c9a66ef3623ead8 HEAD); then
    _staging_args+=(-W ntoskrnl.exe-KeSetSystemAffinityThreadEx)
  fi
  if (cd "${srcdir}"/"${_stgsrcdir}" && git merge-base --is-ancestor bca232f19057160cd7af92882717e0a6c4553257 HEAD && ! git merge-base --is-ancestor f3298432f0c4614a7554e06c6c9a66ef3623ead8 HEAD); then
    _staging_args+=(-W ntoskrnl.exe-KeRevertToUserAffinityThreadEx)
  fi
  if (cd "${srcdir}"/"${_stgsrcdir}" && git merge-base --is-ancestor 9ffacb6b0982ef388cfa327b358fe54660c6834a HEAD && ! git merge-base --is-ancestor 8be56c21f9f3ddb774dca805a365e33322021f8b HEAD); then
    _staging_args+=(-W ntoskrnl.exe-KeQueryActiveProcessorCountEx)
  fi
  if (cd "${srcdir}"/"${_stgsrcdir}" && git merge-base --is-ancestor c6132bcb280e4af8c7497c61d0f9e2282d089ca0 HEAD); then
    _staging_args+=(-W ntoskrnl.exe-KeGenericCallDpc)
  fi
  if (cd "${srcdir}"/"${_stgsrcdir}" && git merge-base --is-ancestor 543cee79a8f08f786a0582dd3d63442d97af1248 HEAD); then
    _staging_args+=(-W ntdll-RtlQueryRegistryValuesEx)
  fi
fi

if [ "$_hotfixes_no_confirm" != "true" ]; then
  msg2 ""
  read -rp "HALP! We got some hotfixes for your current tree. Do you want to apply them all with no further prompt?"$'\n> N/y : ' _hotfixansw;
  if [ "$_hotfixansw" = "y" ]; then
    _hotfixes_no_confirm="true"
  fi
fi

if (cd "${srcdir}"/"${_stgsrcdir}" && ! git merge-base --is-ancestor a1bda115af8ad3484b7c17eac7da74e4906fa9e4 HEAD); then
  if [ "$_hotfixes_no_confirm" != "true" ]; then
    read -rp "Hotfix: Upstream commits cd215bb to ca13f48 are interacting badly with WINEDEBUG env var and break staging. Are you okay to revert them ?"$'\n> N/y : ' _hotfixansw;
  fi
  if [ "$_hotfixansw" = "y" ] || [ "$_hotfixes_no_confirm" = "true" ]; then
    _hotfix_mainlinereverts=(cd215bb49bc240cdce5415c80264f8daa557636a 8ca9e0b1abba7640e288df7b55b60903bc52fc9d 6a1667fab428764eeaba38ac9b5cb1813c5cffda 9b12068c6c8ba656e8ca768227b1a970877d4730 cc5953048e570155deb791b9e9e738a0508c2032 0936606c383744daa8be046db72e8e888522ce21 ca13f489e18fb1f7944e3bdcfdfc4a810bf80994)

    _hotfix_stagingreverts=()
  fi
fi

# Broken staging fbe1ba5
if (cd "${srcdir}"/"${_stgsrcdir}" && git merge-base --is-ancestor fbe1ba5578fb7380e2b09a5aebf5aa488744a823 HEAD && ! git merge-base --is-ancestor 5246a035e9d8f978a7b49bb9a607dc1edbc0c53d HEAD); then
  msg2 "Ignoring staging upstream commit on this SHA (hotfix)"
  _staging_upstreamignore="true"
fi

# Broken staging f329843
if (cd "${srcdir}"/"${_stgsrcdir}" && git merge-base --is-ancestor f3298432f0c4614a7554e06c6c9a66ef3623ead8 HEAD); then
  msg2 "Ignoring staging upstream commit on this SHA (hotfix)"
  _staging_upstreamignore="true"
fi

if (cd "${srcdir}"/"${_winesrcdir}" && git merge-base --is-ancestor fd7992972b252ed262d33ef604e9e1235d2108c5 HEAD); then
  hotfixer() {
      # https://bugs.winehq.org/show_bug.cgi?id=48971
      # https://bugs.winehq.org/show_bug.cgi?id=49007
      # https://bugs.winehq.org/show_bug.cgi?id=49025
      # https://bugs.winehq.org/show_bug.cgi?id=49098
      # https://bugs.winehq.org/show_bug.cgi?id=49123
      # https://bugs.winehq.org/show_bug.cgi?id=49041
      if git merge-base --is-ancestor b7b1ad09629a6678383a5ae791a9507c9eb87be3 HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-6."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor d2b70aa57a77103107a2e620999181c518d14bda HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-5."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor 68e675d73db4fb90fff84c0e1f6de3b492061b5f HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-4."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor 6f4272ce3e74f2d30f45bf0d407cdc9264b813a9 HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-3."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor 0a72ec1dacb59c72980c3133fddf316377349048 HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5-2."${_userpatch_ext}revert")
      elif git merge-base --is-ancestor fd7992972b252ed262d33ef604e9e1235d2108c5 HEAD >/dev/null 2>&1; then
        local _patches=("$_where"/wine-tkg-patches/hotfixes/fd7992972b252ed262d33ef604e9e1235d2108c5."${_userpatch_ext}revert")
      fi
      # WINEDEBUG crash
      #if git merge-base --is-ancestor 0936606c383744daa8be046db72e8e888522ce21 HEAD >/dev/null 2>&1; then
      #  _patches+=("$_where"/wine-tkg-patches/hotfixes/acd209d6039f2492bdc8aca3d15bb1b268b04f1a-2."${_userpatch_ext}revert")
      if (cd "${srcdir}"/"${_stgsrcdir}" && ! git merge-base --is-ancestor a1bda115af8ad3484b7c17eac7da74e4906fa9e4 HEAD); then
        if git merge-base --is-ancestor acd209d6039f2492bdc8aca3d15bb1b268b04f1a HEAD >/dev/null 2>&1; then
          _patches+=("$_where"/wine-tkg-patches/hotfixes/acd209d6039f2492bdc8aca3d15bb1b268b04f1a."${_userpatch_ext}revert")
        fi
        # Staging conflict
        if git merge-base --is-ancestor 4501d49149e37b37edd61f8a1694930db7418a61 HEAD >/dev/null 2>&1; then
          _patches+=("$_where"/wine-tkg-patches/hotfixes/4501d49149e37b37edd61f8a1694930db7418a61."${_userpatch_ext}revert")
        fi
      fi
      if [ ${#_patches[@]} -ge 2 ] || [ -e "${_patches}" ]; then
        if [ "$_hotfixes_no_confirm" != "true" ]; then
          msg2 "Found ${#_patches[@]} reverting hotfix:"
          printf '%s\n' "${_patches[@]}"
          if [[ ${_patches[*]} =~ "fd7992972b252ed262d33ef604e9e1235d2108c5" ]]; then
            msg2 "An upstream patchset (starting with fd79929) breaks a large amount of games in various ways (ex: WoW, Overwatch, Star Citizen, Path of Exile etc.)."
            msg2 "As a temporary fix, this patch reverts it on current HEAD."
            msg2 " !! On the most recent trees, some of the games this used to fix are now broken again by another bad interaction"
            msg2 "introduced since (seems to be limited to blizzard stuff so far) !!"
            msg2 ""
          fi
          if [[ ${_patches[*]} =~ "acd209d6039f2492bdc8aca3d15bb1b268b04f1a" ]]; then
            msg2 "An upstream patch (acd209d) breaks setting WINEDBUG and leads to segfaults. As a temporary fix, this patch reverts it on current HEAD."
            msg2 ""
          fi
          if [[ ${_patches[*]} =~ "4501d49149e37b37edd61f8a1694930db7418a61" ]]; then
            msg2 "A staging patch interferes with upstream hotfixes. As a temporary fix for a fix of a fix that hasn't been fixed by other fixes, this patch fixes it."
            msg2 ""
          fi
          read -rp "Do you want to install it/them?"$'\n> N/y : ' _CONDITION;
        fi
        if [ "$_CONDITION" = "y" ] || [ "$_hotfixes_no_confirm" = "true" ]; then
          for _f in "${_patches[@]}"; do
            if [ -e "${_f}" ]; then
              msg2 "######################################################"
              msg2 ""
              msg2 "Applying reverting hotfix ${_f}"
              msg2 ""
              msg2 "######################################################"
              echo -e "\nApplying reverting hotfix ${_f##*/}" >> "$_where"/prepare.log
              patch -Np1 -R < "${_f}" >> "$_where"/prepare.log || (error "Patch application has failed. The error was logged to $_where/prepare.log for your convenience." && exit 1)
              echo "Applied reverting hotfix ${_f}" >> "$_where"/last_build_config.log
            fi
          done
        fi
      fi

      _patches=("$_where"/wine-tkg-patches/hotfixes/*."${_userpatch_ext}patch")
      if [ ${#_patches[@]} -ge 2 ] || [ -e "${_patches}" ]; then
        if [ "$_hotfixes_no_confirm" != "true" ]; then
          msg2 "Found ${#_patches[@]} hotfix:"
          printf '%s\n' "${_patches[@]}"
          read -rp "Do you want to install it/them?"$'\n> N/y : ' _CONDITION;
        fi
        if [ "$_CONDITION" = "y" ] || [ "$_hotfixes_no_confirm" = "true" ]; then
          for _f in "${_patches[@]}"; do
            if [ -e "${_f}" ]; then
              msg2 "######################################################"
              msg2 ""
              msg2 "Applying hotfix ${_f}"
              msg2 ""
              msg2 "######################################################"
              echo -e "\nApplying hotfix ${_f##*/}" >> "$_where"/prepare.log
              patch -Np1 < "${_f}" >> "$_where"/prepare.log || (error "Patch application has failed. The error was logged to $_where/prepare.log for your convenience." && exit 1)
              echo "Applied hotfix ${_f}" >> "$_where"/last_build_config.log
            fi
          done
        fi
      fi
    }
else
  hotfixer() {
    msg2 "No hotfix for you"
  }
fi
